# завдання по numpy, яке було дано на парі 21 квітня 2025 року

import numpy as np

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# завдання 1: сума матриць
print("\n\nзавдання 1: сума матриць")
# матриці
A1 = np.array([[1, 2, 3, 4],
              [2, -2, -4, 5]])
B1 = np.array([[1, -1, 1, 2],
              [-2, 3, 5, 6]])

# обчислюємо 4A + 3B
result = 4 * A1 + 3 * B1
print("\nРезультат 4A + 3B:")
print(result)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# завдання 2: матричний добуток
print("\n\nзавдання 2: матричний добуток")
# матриці
A2 = np.array([[2, -1, 4, 5],
              [3,  1, 2, 4]])

B2 = np.array([[1,  4,  5],
              [2,  3,  4],
              [5,  6, -1],
              [2, -1,  3]])

C2 = np.array([[1, 2, 3],
              [4, 5, 4]])

# індекси елемента, який шукаємо
i, j = 1, 2  # другий рядок і третій стовпець

# перевірка добутку A * B
try:
    AB = A2 @ B2
    print(f"\nДобуток A * B існує: \n{AB}")
    print(f"Елемент [2,3]: {AB[i, j]}")
except ValueError:
    print("Добуток A * B не існує")

# перевірка добутку A * C
try:
    AC = A2 @ C2
    print(f"\nДобуток A * C існує: {AC}")
    print(f"Елемент [2,3]: {AC[i, j]}")
except ValueError:
    print("\nДобуток A * C не існує")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# завдання 3: вирази з матричним добутком і додаванням
print("\n\nзавдання 3: вирази з матричним добутком і додаванням")
# матриці
A3 = np.array([[ 2, -3],
              [ 4,  5]])

B3 = np.array([[ 1,  2],
              [-3, -4]])

C3 = np.array([[ 4, -1],
              [ 2,  1]])

# обчислення виразів
try:
    print(f"\nD = AC + 3BC:\n{A3 @ C3 + 3 * (B3 @ C3)}")
except ValueError:
    print("Неможливо обчислити D = AC + 3BC")

try:
    print(f"\nG = AC + 3CB:\n{A3 @ C3 + 3 * (C3 @ B3)}")
except ValueError:
    print("Неможливо обчислити G = AC + 3CB")

try:
    print(f"\nQ = CA + 3CB:\n{C3 @ A3 + 3 * (C3 @ B3)}")
except ValueError:
    print("Неможливо обчислити Q = CA + 3CB")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# завдання 4: вираз з транспонованими матрицями
print("\n\nзавдання 4: вираз з транспонованими матрицями")
# матриці
A4 = np.array([[ 2, -4],
              [ 3,  5],
              [-1,  0]])

B4 = np.array([[ 1,  2,  7],
              [-3, -4,  0],
              [ 5,  2,  1]])

C4 = np.array([[ 6, -3, 9],
              [ 4, -5, 2],
              [ 8,  1, 5]])

# обчислення виразу: D = A.T @ C - 2 * A.T @ B.T
try:
    print(f"D = A.T @ C - 2 * A.T @ B.T:\n{A4.T @ C4 - 2 * (A4.T @ B4.T)}")
except ValueError:
    print("Неможливо обчислити D = A.T @ C - 2 * A.T @ B.T")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# завдання 5: визначник матриць
print("\n\nзавдання 5: визначник матриць")
# матриці
D_a = np.array([[2, -3],
                [4,  5]])

D_b = np.array([[1, -1, 2],
                [3,  2, 4],
                [2,  3, 1]])

# визначники
det_a = round(np.linalg.det(D_a), 1)
print(f"Визначник D (A): {det_a}")

det_b = round(np.linalg.det(D_b), 1)
print(f"Визначник D (B): {det_b}")
